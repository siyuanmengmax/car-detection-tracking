import pandas as pd
import numpy as np

# def load_labels_from_csv(csv_path):
#     labels = {}
#     df = pd.read_csv(csv_path)
#     for index, row in df.iterrows():
#         frame_id = row['frame_id']
#         x1 = row['x1']
#         y1 = row['y1']
#         x2 = row['x2']
#         y2 = row['y2']
#         if frame_id not in labels:
#             labels[frame_id] = []
#         labels[frame_id].append([x1, y1, x2, y2])
#     return labels


def gt_csv(csv_path):
    labels = []
    df = pd.read_csv(csv_path)
    for index, row in df.iterrows():
        frame=row['frame']
        x1 = row['x1']
        y1 = row['y1']
        x2 = row['x2']
        y2 = row['y2']
        labels.append([frame,x1, y1, x2, y2])
    return np.array(labels)


def pred_csv(csv_path):
    labels = []
    df = pd.read_csv(csv_path)
    for index, row in df.iterrows():
        frame=row['frame']
        x1 = row['x1']
        y1 = row['y1']
        x2 = row['x2']
        y2 = row['y2']
        conf=row['confidence']
        labels.append([frame,x1, y1, x2, y2,conf])
    return np.array(labels)

def calculate_iou(box1, box2):
    # 计算交并比
    inter_x1 = max(box1[0], box2[0])
    inter_y1 = max(box1[1], box2[1])
    inter_x2 = min(box1[2], box2[2])
    inter_y2 = min(box1[3], box2[3])
    inter_area = max(0, inter_x2 - inter_x1) * max(0, inter_y2 - inter_y1)
    box1_area = (box1[2] - box1[0]) * (box1[3] - box1[1])
    box2_area = (box2[2] - box2[0]) * (box2[3] - box2[1])
    union_area = box1_area + box2_area - inter_area
    iou = inter_area / union_area if union_area != 0 else 0
    assert 0.0<= iou <=1.0
    return iou


def calculate_map(predictions, ground_truths, iou_threshold=0.5):
    precision_list = []
    recall_list = []
    ground_truth=ground_truths.shape[0]
    th_conf=np.arange(0.25,0.95,0.05)

    for th in th_conf:
        TP=0
        fin_pred=predictions[predictions[:,-1]>=th] # pick predictions conforming to the th

        for i in range(fin_pred.shape[0]):
            for k in range(ground_truth):
                if ground_truths[k,0]== fin_pred[i,0]:
                    n_iou=calculate_iou(fin_pred[i,1:4], ground_truths[k,1:4])

                    if n_iou >= iou_threshold:
                        TP+=1


        # FP=fin_pred.shape[0] - TP
        # FN=ground_truth.shape[0] - TP

        prec=TP/fin_pred.shape[0]
        rec=TP/ground_truth.shape[0]

        precision_list.append(prec)
        recall_list.append(rec)

    average_precision = np.mean(precision_list) if precision_list else 0
    average_recall = np.mean(recall_list) if recall_list else 0
    return average_precision, average_recall


if __name__ == '__main__':
    predictions = gt_csv('output/detecting_yolo_image/results.csv')
    ground_truths = pred_csv('dataset/Car Tracking & Object Detection/annotations.csv')
    ap, recall = calculate_map(predictions, ground_truths)
    print(f"Mean Average Precision: {ap}, Mean Average Recall: {recall}")

